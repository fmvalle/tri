"""
Script para configurar vari√°veis de ambiente do Sistema TRI Profissional
"""

import os
import getpass

def create_env_file():
    """Cria arquivo .env com configura√ß√µes do PostgreSQL"""
    
    print("üîß Configura√ß√£o do Sistema TRI Profissional")
    print("=" * 50)
    
    # Configura√ß√µes do PostgreSQL
    print("\nüìä Configura√ß√µes do PostgreSQL:")
    db_host = input("Host do PostgreSQL [localhost]: ").strip() or "localhost"
    db_port = input("Porta do PostgreSQL [5432]: ").strip() or "5432"
    db_name = input("Nome do banco de dados [tri_system]: ").strip() or "tri_system"
    db_user = input("Usu√°rio do PostgreSQL [postgres]: ").strip() or "postgres"
    db_password = getpass.getpass("Senha do PostgreSQL: ")
    
    # Configura√ß√µes do Streamlit
    print("\nüåê Configura√ß√µes do Streamlit:")
    streamlit_port = input("Porta do Streamlit [8501]: ").strip() or "8501"
    streamlit_address = input("Endere√ßo do Streamlit [localhost]: ").strip() or "localhost"
    
    # Gerar chave secreta
    import secrets
    secret_key = secrets.token_hex(32)
    
    # Conte√∫do do arquivo .env
    env_content = f"""# Configura√ß√µes do Sistema TRI - Vers√£o Profissional
# Gerado automaticamente em {os.popen('date').read().strip()}

# Ambiente
ENVIRONMENT=development

# Banco de Dados PostgreSQL
DATABASE_URL=postgresql://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}
DB_HOST={db_host}
DB_PORT={db_port}
DB_NAME={db_name}
DB_USER={db_user}
DB_PASSWORD={db_password}

# Chave Secreta para Sess√µes
SECRET_KEY={secret_key}

# Configura√ß√µes de Log
LOG_LEVEL=INFO

# Configura√ß√µes do Dashboard Streamlit
STREAMLIT_SERVER_PORT={streamlit_port}
STREAMLIT_SERVER_ADDRESS={streamlit_address}

# Configura√ß√µes de Autentica√ß√£o
SESSION_TIMEOUT=3600
PASSWORD_MIN_LENGTH=6
"""
    
    # Escrever arquivo .env
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print("\n‚úÖ Arquivo .env criado com sucesso!")
        print(f"üìÅ Localiza√ß√£o: {os.path.abspath('.env')}")
        
        # Testar conex√£o
        print("\nüîç Testando conex√£o com PostgreSQL...")
        test_connection(db_host, db_port, db_name, db_user, db_password)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erro ao criar arquivo .env: {e}")
        return False

def test_connection(host, port, db_name, user, password):
    """Testa conex√£o com PostgreSQL"""
    try:
        import psycopg2
        
        conn = psycopg2.connect(
            host=host,
            port=port,
            database=db_name,
            user=user,
            password=password
        )
        
        conn.close()
        print("‚úÖ Conex√£o com PostgreSQL estabelecida com sucesso!")
        return True
        
    except ImportError:
        print("‚ö†Ô∏è  psycopg2 n√£o instalado. Execute: pip install psycopg2-binary")
        return False
        
    except Exception as e:
        print(f"‚ùå Erro na conex√£o: {e}")
        print("\nüîß Verifique se:")
        print("- PostgreSQL est√° rodando")
        print("- As credenciais est√£o corretas")
        print("- O banco de dados existe")
        print(f"- O usu√°rio tem permiss√µes no banco '{db_name}'")
        return False

def create_database_if_not_exists():
    """Cria banco de dados se n√£o existir"""
    print("\nüóÑÔ∏è  Verificando banco de dados...")
    
    try:
        import psycopg2
        from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT
        
        # Conectar ao PostgreSQL (sem especificar banco)
        conn = psycopg2.connect(
            host=os.getenv('DB_HOST', 'localhost'),
            port=os.getenv('DB_PORT', '5432'),
            database='postgres',  # Banco padr√£o
            user=os.getenv('DB_USER', 'postgres'),
            password=os.getenv('DB_PASSWORD', '')
        )
        
        conn.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
        cursor = conn.cursor()
        
        # Verificar se banco existe
        db_name = os.getenv('DB_NAME', 'tri_system')
        cursor.execute("SELECT 1 FROM pg_database WHERE datname = %s", (db_name,))
        
        if not cursor.fetchone():
            print(f"üìù Criando banco de dados '{db_name}'...")
            cursor.execute(f'CREATE DATABASE "{db_name}"')
            print(f"‚úÖ Banco '{db_name}' criado com sucesso!")
        else:
            print(f"‚úÖ Banco '{db_name}' j√° existe")
        
        cursor.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar/criar banco: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Setup do Sistema TRI Profissional")
    print("Este script ir√° configurar as vari√°veis de ambiente necess√°rias.")
    print()
    
    # Verificar se .env j√° existe
    if os.path.exists('.env'):
        overwrite = input("Arquivo .env j√° existe. Deseja sobrescrever? (s/N): ").strip().lower()
        if overwrite not in ['s', 'sim', 'y', 'yes']:
            print("Opera√ß√£o cancelada.")
            return
    
    # Criar arquivo .env
    if create_env_file():
        print("\nüéâ Configura√ß√£o conclu√≠da!")
        print("\nüìã Pr√≥ximos passos:")
        print("1. python init_database.py  # Inicializar banco de dados")
        print("2. python migrate_data.py   # Migrar dados existentes (opcional)")
        print("3. streamlit run dashboard_v2.py  # Iniciar dashboard")
    else:
        print("\n‚ùå Configura√ß√£o falhou. Verifique os erros acima.")

if __name__ == "__main__":
    main()
